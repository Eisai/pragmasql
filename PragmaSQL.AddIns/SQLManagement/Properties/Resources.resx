<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Output" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Output.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Webcontrol_Webpartmgr" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Webcontrol_Webpartmgr.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="delete1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\delete1.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="delete" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\delete.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="editstyle2" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\edit- style 2.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="DataContainer_MoveNextHS" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\DataContainer_MoveNextHS.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="gear" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\gear.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="back" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\back.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="DatabaseEdit" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Database Edit.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="UserAdd" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\User Add.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Refresh" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Refresh.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="EditInformationHS1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\EditInformationHS.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="saveall" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\saveall.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="newstyle3" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\new- style 3.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="UserDelete" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\User Delete.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="PrimaryKeyHS1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\PrimaryKeyHS1.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="save" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\save.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="PrimaryKeyHS" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\PrimaryKeyHS.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="DatabaseRemove" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Database Remove.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="DatabaseOpen" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Database Open.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="UserEdit" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\User- Edit.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Information" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Information.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="users" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\users.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Warning" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Warning.bmp;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="Script_GetAllIndexes" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()


SELECT O.id as objectID, I.indid as indexID, CAST(O.id AS VARCHAR) + ',' + CAST(I.indid AS VARCHAR) as completeindexID
	, CASE WHEN @cmplevel &lt; 90 
		THEN USER_NAME(O.uid) 
		ELSE SCHEMA_NAME(O.uid) 
	END 'owner'
	, O.name as objectName
	, ( CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(O.uid) ELSE SCHEMA_NAME(O.uid) END ) + '.' + (I.name) as completename
	, I.name as indexName,CASE O.xtype WHEN 'V' THEN 'Yes' ELSE 'No' END onView,
	case when (I.status &amp; 16) = 16 then 'clustered' else 'not clustered' end as [clustered], case when (I.status &amp; 2) = 2 then 'unique' else 'not unique' end as [unique], FILEGROUP_NAME(I.groupid) as [filegroup], I.status
FROM sysobjects O,sysindexes I 
WHERE I.indid&gt;0 AND I.indid&lt;255 AND I.status&amp;2048!=2048 AND I.status&amp;4096!=4096 AND I.id=O.id AND type in ('U','V') 
	AND (INDEXPROPERTY(I.id,I.name,'IsStatistics') &lt;&gt; 1) AND (INDEXPROPERTY(I.id,I.name,'IsAutoStatistics') &lt;&gt; 1) 
	AND (INDEXPROPERTY(I.id,I.name,'IsHypothetical') &lt;&gt; 1) AND O.type!='S'
order by
	CASE WHEN @cmplevel &lt; 90 
		THEN USER_NAME(O.uid) 
		ELSE SCHEMA_NAME(O.uid) 
	END,
	objectName,
	completename</value>
  </data>
  <data name="Script_GetAllForeignKeys" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()

SELECT 
	dbo.sysreferences.constid as id, dbo.sysobjects.id as tableId,
	CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END AS owner
	, (CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END) + '.' + (OBJECT_NAME(dbo.sysobjects.id)) AS tableName
	, (CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END) + '.' + OBJECT_NAME(dbo.sysreferences.constid) as completeKeyName 
	, OBJECT_NAME(dbo.sysreferences.constid) AS keyName
	, CASE (sysconstraints.status&amp;0x004000)WHEN 0x4000 THEN 'Disabled' ELSE 'Enabled' END as status
FROM dbo.sysreferences 
	INNER JOIN dbo.sysobjects ON dbo.sysreferences.fkeyid = dbo.sysobjects.id 
	INNER JOIN dbo.sysconstraints ON dbo.sysreferences.constid = dbo.sysconstraints.constid
ORDER BY 
	CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid)END
	, OBJECT_NAME(dbo.sysobjects.id)
	, OBJECT_NAME(dbo.sysreferences.constid)</value>
  </data>
  <data name="Script_GetAllPrimaryKeys" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()

	
SELECT 
	object_id((CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END) + '.' + (dbo.sysindexes.name)) as id 
	, dbo.sysobjects.id as tableId
	, CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END AS tableOwner
	, (CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END) + '.' + (OBJECT_NAME(dbo.sysobjects.id)) AS tableName
	, (CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END) + '.' + (dbo.sysindexes.name) as completeKeyName
	,dbo.sysindexes.name AS keyName, FILEGROUP_NAME(dbo.sysindexes.groupid) AS keyFileGroup
FROM dbo.sysindexes 
	INNER JOIN dbo.sysobjects ON dbo.sysindexes.id = dbo.sysobjects.id
WHERE (dbo.sysindexes.status &amp; 0x800 = 0x800) 
ORDER BY 
	CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid)END
	, OBJECT_NAME(dbo.sysobjects.id)
	, dbo.sysindexes.name</value>
  </data>
  <data name="Script_GetAllUserDefinedTables" xml:space="preserve">
    <value>declare @cmplevel int select @cmplevel = cmptlevel from  master..sysdatabases where name = DB_NAME()
select 
	so.*,
	CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(so.uid) ELSE SCHEMA_NAME(so.uid) END  'owner',
	(so.name) as 'qualifiedname'
from sysobjects so
where ( so.xtype = 'U') 
order by 
  CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(so.uid) ELSE SCHEMA_NAME(so.uid) END
 ,so.name</value>
  </data>
  <data name="Script_GetCheckConstraints" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()

SELECT 
	C.constid as id
	, O.id as tableId
	, CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(O.uid) ELSE SCHEMA_NAME(O.uid) END  as owner
	, O.name as tablename
	, OBJECT_NAME(C.constid) as name
	, (CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(O.uid) ELSE SCHEMA_NAME(O.uid) END )+ '.' + (OBJECT_NAME(C.constid)) as completeCheckName
	,CASE (C.status&amp;0x004000) WHEN 0x004000 THEN 'Disabled' ELSE 'Enabled' END as status
	, CASE (C.status&amp;0x200000) WHEN 0x200000 THEN 'Yes' ELSE 'No' END as notforreplication, '{0}' as databasename
FROM sysconstraints C,sysobjects O 
WHERE (C.status &amp; 0xf)=4 AND O.id=C.id
ORDER BY 
	CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(O.uid) ELSE SCHEMA_NAME(O.uid) END
	,OBJECT_NAME(O.uid)
	,O.name
	,OBJECT_NAME(C.constid)</value>
  </data>
  <data name="Script_GetConstraintIdByName" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()

SELECT 
	C.constid as id
	, O.id as tableId
	, CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(O.uid) ELSE SCHEMA_NAME(O.uid) END  as owner
	, O.name as tablename
	, OBJECT_NAME(C.constid) as name
	, (CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(O.uid) ELSE SCHEMA_NAME(O.uid) END )+ '.' + (OBJECT_NAME(C.constid)) as completeCheckName
	,CASE (C.status&amp;0x004000) WHEN 0x004000 THEN 'Disabled' ELSE 'Enabled' END as status
	, CASE (C.status&amp;0x200000) WHEN 0x200000 THEN 'Yes' ELSE 'No' END as notforreplication, '{0}' as databasename
FROM sysconstraints C,sysobjects O 
WHERE OBJECT_NAME(C.constid) = '{1}' AND (C.status &amp; 0xf)=4 AND O.id=C.id
ORDER BY 
	CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(O.uid) ELSE SCHEMA_NAME(O.uid) END
	,OBJECT_NAME(O.uid)
	,O.name
	,OBJECT_NAME(C.constid)</value>
  </data>
  <data name="Script_GetDataTypes" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()

SELECT 	
	CASE WHEN @cmplevel &lt; 90 
		THEN USER_NAME(types1.uid) 
		ELSE SCHEMA_NAME(types1.uid) 
	END 'owner',
	CASE WHEN (CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(types1.uid) ELSE  SCHEMA_NAME(types1.uid) END ) = 'sys' 
		THEN LOWER(types1.name)  
		ELSE LOWER( ((CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(types1.uid) ELSE  SCHEMA_NAME(types1.uid) END )) + '.' + (types1.name)) 
	END AS 'name',
	CASE WHEN (CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(types1.uid) ELSE  SCHEMA_NAME(types1.uid) END ) = 'sys' 
		THEN LOWER(types1.name)  
		ELSE LOWER(((CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(types1.uid) ELSE  SCHEMA_NAME(types1.uid) END )) + '.' + (types1.name) ) 
		END AS  'basename',
	types1.length, types1.prec, types1.scale, 
    types1.allownulls, types1.usertype, OBJECT_NAME(types1.[domain]) 'domain', OBJECT_NAME(types1.tdefault) 'default'
FROM dbo.systypes types1
ORDER BY types1.name</value>
  </data>
  <data name="Script_GetDefaults" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()

SELECT 
	id
	, (CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(uid) ELSE SCHEMA_NAME(uid) END ) + '.' + (name) as name
	, CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(uid) ELSE SCHEMA_NAME(uid) END  as UserId
	, name as defaultName
	, crdate 
FROM sysobjects 
	WHERE type='D' AND id NOT IN (SELECT constid FROM sysconstraints)
ORDER BY
	CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(uid) ELSE SCHEMA_NAME(uid) END
	,name</value>
  </data>
  <data name="Script_GetForeignKeysForTable" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()

SELECT 
	dbo.sysreferences.constid as id, dbo.sysobjects.id as tableId,
	CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END AS owner
	, (CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END) + '.' + (OBJECT_NAME(dbo.sysobjects.id)) AS tableName
	, (CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END) + '.' + OBJECT_NAME(dbo.sysreferences.constid) as completeKeyName 
	, OBJECT_NAME(dbo.sysreferences.constid) AS keyName
	, CASE (sysconstraints.status&amp;0x004000)WHEN 0x4000 THEN 'Disabled' ELSE 'Enabled' END as status
FROM dbo.sysreferences 
	INNER JOIN dbo.sysobjects ON dbo.sysreferences.fkeyid = dbo.sysobjects.id 
	INNER JOIN dbo.sysconstraints ON dbo.sysreferences.constid = dbo.sysconstraints.constid
WHERE dbo.sysobjects.id = {0} 
ORDER BY 
	CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid)END
	, OBJECT_NAME(dbo.sysobjects.id)
	, OBJECT_NAME(dbo.sysreferences.constid)</value>
  </data>
  <data name="Script_GetIndexesForObjects" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()

SELECT 
	O.id as objectID
	, I.indid as indexID
	, CAST(O.id AS VARCHAR) + ',' + CAST(I.indid AS VARCHAR) as completeindexID
	, CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(O.uid) ELSE SCHEMA_NAME(O.uid) END 'owner'
	, O.name as objectName
	,  (CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(O.uid) ELSE SCHEMA_NAME(O.uid) END)+ '.' + (I.name) as completename
	, I.name as indexName
	, CASE O.xtype WHEN 'V' THEN 'Yes' ELSE 'No' END onView
	, case when (I.status &amp; 16) = 16 then 'clustered' else 'not clustered' end as [clustered]
	, case when (I.status &amp; 2) = 2 then 'unique' else 'not unique' end as [unique]
	, FILEGROUP_NAME(I.groupid) as [filegroup]
	, I.status
FROM sysobjects O,sysindexes I 
WHERE O.id = {0} AND 
	I.indid&gt;0 AND I.indid&lt;255 AND I.status&amp;2048!=2048 
	AND I.status&amp;4096!=4096 AND I.id=O.id AND type in ('U','V') 
	AND (INDEXPROPERTY(I.id,I.name,'IsStatistics') &lt;&gt; 1) 
	AND (INDEXPROPERTY(I.id,I.name,'IsAutoStatistics') &lt;&gt; 1) 
	AND (INDEXPROPERTY(I.id,I.name,'IsHypothetical') &lt;&gt; 1) 
	AND O.type!='S'
order by 
	CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(O.uid) ELSE SCHEMA_NAME(O.uid) END 
	, objectName
	, indexName</value>
  </data>
  <data name="Script_GetPrimaryKeysForTable" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()

	
SELECT 
	object_id((CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END) + '.' + (dbo.sysindexes.name)) as id 
	, dbo.sysobjects.id as tableId
	, CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END AS tableOwner
	, (CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END) + '.' + (OBJECT_NAME(dbo.sysobjects.id)) AS tableName
	, (CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END) + '.' + (dbo.sysindexes.name) as completeKeyName
	,dbo.sysindexes.name AS keyName, FILEGROUP_NAME(dbo.sysindexes.groupid) AS keyFileGroup
FROM dbo.sysindexes 
	INNER JOIN dbo.sysobjects ON dbo.sysindexes.id = dbo.sysobjects.id
WHERE (dbo.sysindexes.status &amp; 0x800 = 0x800) AND dbo.sysobjects.id = {0}
ORDER BY 
	CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid)END
	, OBJECT_NAME(dbo.sysobjects.id)
	, dbo.sysindexes.name</value>
  </data>
  <data name="Script_GetRules" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()

SELECT 
	id
	, (((CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(uid) ELSE SCHEMA_NAME(uid) END)) + '.' + (name) )as name
	, CASE WHEN @cmplevel &lt; 90 
		THEN USER_NAME(uid) 
		ELSE SCHEMA_NAME(uid) 
	END 
	, name as ruleName
	, crdate
	, '{0}' as databasename 
FROM sysobjects 
WHERE 
	type='R' 
	AND id NOT IN (SELECT constid FROM sysconstraints)
ORDER BY
	CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(uid) ELSE SCHEMA_NAME(uid) END 
	,name</value>
  </data>
  <data name="Script_GetTablesForCheckConstraint" xml:space="preserve">
    <value>declare @cmplevel int select @cmplevel = cmptlevel from  master..sysdatabases where name = DB_NAME()
SELECT 
	CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END 'owner'
	, dbo.sysobjects.name
	, (dbo.sysobjects.name) as 'qualifiedname'
	, (( CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END)) + '.' + (dbo.sysobjects.name) as completename, dbo.sysindexes.[rows]
	, FILEGROUP_NAME(dbo.sysindexes.groupid) AS filegroup, dbo.sysobjects.crdate, '{0}' as databasename
FROM dbo.sysobjects 
	INNER JOIN dbo.sysindexes ON dbo.sysobjects.id = dbo.sysindexes.id
WHERE (dbo.sysobjects.type IN ('U', 'TF')) AND (dbo.sysindexes.indid IN (0, 1)) AND (dbo.sysobjects.type &lt;&gt; 'S')  
ORDER BY 
	CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(dbo.sysobjects.uid) ELSE SCHEMA_NAME(dbo.sysobjects.uid) END
	, dbo.sysobjects.name</value>
  </data>
  <data name="Script_GetUserDataTypes" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()

SELECT 
	usertype as id
	, CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(uid) ELSE SCHEMA_NAME(uid) END  as 'owner'
	, name
	, (CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(uid) ELSE SCHEMA_NAME(uid) END ) + '.' + (name) as completename
	, type_name(xtype) as basetype
	, OBJECT_NAME(domain) as boundrule
	, OBJECT_NAME(tdefault) as bounddefault
FROM systypes S WHERE xusertype&gt;256  
ORDER BY 
	CASE WHEN @cmplevel &lt; 90 THEN USER_NAME(uid) ELSE SCHEMA_NAME(uid) END 
    ,name</value>
  </data>
  <data name="Script_GetUserTableById" xml:space="preserve">
    <value>declare @cmplevel int select @cmplevel = cmptlevel from  master..sysdatabases where name = DB_NAME()
select 
	so.*,
	(so.name) as 'qualifiedname',
	CASE WHEN @cmplevel &lt; 90  THEN USER_NAME(so.uid) ELSE SCHEMA_NAME(so.uid) END  'owner' 
from sysobjects so
where ( so.xtype = 'U') AND so.id = {0}
order by so.name</value>
  </data>
  <data name="Script_ObjectsForPrivileges" xml:space="preserve">
    <value>declare @cmplevel int
select @cmplevel = cmptlevel 
from  master..sysdatabases 
where name = DB_NAME()


 declare @tbl table
(
	objName sysname NULL,
    objType char(2) NULL,
    owner nvarchar(256) NULL,
    candelete bit NULL,oldCandelete bit NULL,
    caninsert bit NULL,oldCaninsert bit NULL,
    canreferences bit NULL,oldCanreferences bit NULL,
    canselect bit NULL,oldCanselect bit NULL,
    canupdate bit NULL,oldCanupdate bit NULL,
    canexecute bit NULL,oldCanexecute bit NULL
)

insert into @tbl(objName,objType,[owner])
SELECT 
	sysobjects.name
	, sysobjects.type
	, CASE WHEN @cmplevel &lt; 90 
		THEN USER_NAME(sysobjects.uid) 
		ELSE SCHEMA_NAME(sysobjects.uid) 
	END 
FROM sysobjects 
	WHERE sysobjects.type IN ('U','S','V','X','TF','P','IF','FN') 
ORDER BY sysobjects.name

select * from  @tbl</value>
  </data>
</root>