<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALeikwBjSTUAY0k1AGNJNQBjSTUAY0k1AGNJ
        NQBjSTUAY0k1AGNJNQBjSTUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAt6KTAP7+/gC3opMAt6KTALei
        kwC3opMAt6KTALeikwC3opMAt6KTAGNJNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC3opMA/v7+AP7+
        /gD8+vkA9/HuAPHn4QDs3dUA5tPJAOHKvQC3opMAY0k1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAt6KTAGNJNQBjSTUAY0k1ALei
        kwD+/v4A6px0AOqSZADqh1QA6HxFAOJzOgDZajMA5M/EALeikwBjSTUAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC3opMA/v7+ALei
        kwC3opMAt6KTAP7+/gD+/v4A/v7+AP38+wD48/AA8unjAO3f2ADn1csAt6KTAGNJNQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALei
        kwD+/v4A/v7+APz6+QC5pJUA/v7+AOqcdADqkmQA6odUAOh8RQDiczoA2WozAOvb0wC3opMAY0k1AAKl
        wAACnbkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC3opMAY0k1AGNJ
        NQBjSTUAt6KTAP7+/gDqnHQA6pJkAL6pmgD+/v4A/v7+AP7+/gD+/v4A/v7+APn18gD06+YA7uHaALei
        kwBjSTUAAqrEAAKkvwACnbkABJWxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALei
        kwD+/v4At6KTALeikwC3opMA/v7+AP7+/gD+/v4Aw66eAP7+/gDqm3QA6pJkAOqHVADofEUA4nM6ANlq
        MwDx5+EAt6KTAGNJNQABrcgAAqXAAAKhvQADmbUABJWxAASMqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAt6KTAP7+/gD+/v4A/Pr5ALmklQD+/v4A6px0AOqSZADIsqMA/v7+AP7+/gD+/v4A/v7+AP7+
        /gD+/v4A+vf1APXt6QC3opMAY0k1AAGyzQACqsQAAqXAAAKduQAEmbQABJGtAASMqAAFh6QAAAAAAAAA
        AAAAAAAAAAAAAAAAAAC3opMA/v7+AOqcdADqkmQAvqmaAP7+/gD+/v4A/v7+AMy2pwD+/v4A6px0AOqS
        ZADqh1QA6HxFAP7+/gD9/PsAt6KTALeikwBkSjYAAbTOAAGtyAACqsQAAqG9AAKduQADlrEABI+sAASJ
        pQAEhaEABYCdAAAAAAAAAAAAAAAAALeikwD+/v4A/v7+AP7+/gDDrp4A/v7+AOqbdADqkmQA0burAP7+
        /gD+/v4A/v7+AP7+/gD+/v4A/v7+ALeikwBkSjYAZEo2AGRKNgABuNIAAbLNAAGtyAACpcAAAqG9AASZ
        tAAElbEABIyoAAWHpAAFgJ0ABX2aAAZ6lwBbbnYAuaSVAP7+/gDqnHQA6pJkAMiyowD+/v4A/v7+AP7+
        /gDUvq4A/v7+AP7+/gD+/v4A/v7+AP7+/gD+/v4AuaSVANTFuQBjSTUAvqmaAAC81gABtdAAAbDLAAKq
        xAACpcAAAp25AASVsQAEka0ABIqoAASFoQAFgJ0ABX2aAFVocAC+qZoA/v7+AP7+/gD+/v4AzLanAP7+
        /gDqnHQA6pJkANjCsgD+/v4A/v7+AP7+/gD+/v4A/v7+AP7+/gDAq5wAY0k1AN/MwQAn1ukAAL7YAAC5
        1AABtM4AAa3IAAKowgACob0AA5m1AASVsQAEj6wABImlAASFoQAFgJ0AT2BpAMOungD+/v4A6pt0AOqS
        ZADRu6sA/v7+AP7+/gD+/v4A2MKyANjCsgDYwrIA2MKyANjCsgDUvq4Az7mpAMmzpADfzMEAM9vrAC/Z
        6gAAwNoAAL7YAAG40gABss0AAa3IAAKlwAADoLsAA5m1AASRrQAEjKgABYekAAWAnQBHWWIAyLKjAP7+
        /gD+/v4A/v7+ANS+rgD+/v4A/v7+AP7+/gD+/v4A/v7+AP7+/gC3opMA1MW5AGNJNQC3opMAQ+HvAD/g
        7gA73u0AN9zsAADC3AAAvtgAALnUAAG10AABsMsAAqrEAAKkvwACnbkAA5axAASRrQAEiaUABIWhAEFR
        WwDMtqcA/v7+AOqcdADqkmQA2MKyAP7+/gD+/v4A/v7+AP7+/gD+/v4A/v7+ALeikwBjSTUA38zBAFDm
        8gBO5fEAR+PwAEPh7wA/3+4AAMTeAADC3AAAvtgAALnUAAG0zgABrcgAAqjCAAKhvQADmbUAA5axAASM
        qAAEiaUAPEtWANG7qwD+/v4A/v7+AP7+/gDYwrIA2MKyANjCsgDYwrIA2MKyANS+rgDPuakAybOkAODR
        xwBc7PQAV+rzAFPo8gBQ5vIAS+TxAEfj7wAAxuAAAMTeAADA2gAAvNYAAbXQAAGyzQACqsQAAqXAAAKd
        uQADmbUABJGtAASMqAA4R1IA1L6uAP7+/gD+/v4A/v7+AP7+/gD+/v4A/v7+ALeikwDUxbkAY0k1ALei
        kwBq8fgAZvD3AGTv9gBh7vYAW+31AFjq8wBT6PIATuXxAADG4AAAxuAAAMLcAAC+2AAAudQAAbXQAAGt
        yAACqsQAAqG9AAKduQADlrEABJGtADhHUgDYwrIA/v7+AP7+/gD+/v4A/v7+AP7+/gD+/v4At6KTAGNJ
        NQDfzMEAdfX6AHL0+QBu8/gAavH4AGbw9wBk7/YAXOz0AFvr9ABO5fEAAMbgAADG4AAAxN4AAMLcAAC+
        2AAAudQAAbLNAAGtyAACqMIAAqG9AAOZtQAElbEAOEdSANjCsgDYwrIA2MKyANjCsgDYwrIA1L6uALei
        kwC3opMA38zBAH35/AB7+PwAePf7AHX1+gBy9PkAbvP4AGrx+ABm8PcAYLu7AGC7uwAEiqgABIqoAADG
        4AAAxN4AAMDaAAC81gABtdAAAbLNAAKqxAACpcAAAp25AAOZtQA4R1IAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHSDjACE/P4AhPv9AIH7/AB9+fwAffn8AHj3+wB19foAYLu7AGC7uwC5+PsArfb6AKD1
        +QCT9PkABIqoAASKqAAAwtwAAL7YAAC51AABtdAAAa3IAAKqxAACob0AA5y3ADhHUgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAdoeQAIn+/gCJ/v4AhPz+AIH7/ACB+/wAWMXOAGC7uwDS+vwAxvn8ALn4
        +wCt9voAoPX5AJT0+QCI8vgAfPH4AASKqAAEiqgAAL7YAAG40gABss0AAq3HAAKlwAADoLsAOEdSAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4iZQAjP//AIz//wCJ/v4AWMXOAFjFzgDo/P0A3fz9ANL6
        /ADG+fwAufj7AK32+gCg9fkAk/T5AIjy+AB88fgAcvD4AGjw9wAEiqgABIqoAAG10AABsMsAAqrEAAKk
        vwA4R1IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHmMlgCM//8AWMXOAFjFzgD5/v4A8f3+AOj8
        /QDd/P0A0vr8AMb5/AC69/sArfb6AKD1+QCU9PkAiPL4AHzx+ABy8PgAaPD3AGHu9gBb7fUABIqoAASK
        qAABrcgAAqjCADhHUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeYyWAFjFzgD+/v4A/v7+APn+
        /gDx/f4A6Pz9AN38/QDS+vwAxvn8ALn4+wCt9voAoPX5AJT0+QCI8vgAfPH4AHLw9wBo8PcAYe72AFvt
        9QBb7fUAW+31AASKqAAEiqgAOEdSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB5jJYAHnSZAP7+
        /gD+/v4A+f7+APH9/gDo/P0A3fz9ANL6/ADG+fwAufj7AK32+gCg9fkAlPT5AIfy+AB88fgAcvD4AGjv
        9wBh7vYAW+31AFvt9QBb7fUAW+31AB50mQA4R1IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAHnSZAB50mQD5/v4A8f3+AOj8/QDd/P0A0vr8AMb5+wC5+PwArfb6AKD1+QCU9PkAiPL4AHzx
        +ABy8PgAaO/3AGHu9gBb7fUAW+31AFvt9QAedJkAHnSZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB50mQAedJkA6Pz9AN77/QDS+vwAxvn7ALn4+wCt9voAoPX5AJT0
        +QCI8vgAffH3AHLw9wBm8PcAYe72AFvt9QAedJkAHnSZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAedJkAHnSZANL6/ADG+fwAufj7AK32
        +gCg9fkAlPT5AIfy+AB88fgAcvD3AGjv9wAedJkAHnSZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHnSZAB50
        mQC5+PsArfb6AKD1+QCU9PkAh/L4AHzx+AAedJkAHnSZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAB50mQAedJkAoPX5AJP0+QAedJkAHnSZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAedJkAHnSZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/wAf//8AH///AB//8AAf//AAB//wAAH/AAAAfwAAAB8AAAAHAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+AAAA/gAAAP4AAAD+AAAA/gAAAP4A
        AAD/gAAB/+AAB//4AB///gB///+B////5/8=
</value>
  </data>
</root>